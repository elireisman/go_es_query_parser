package grammar

import "github.com/elireisman/go_es_query_parser/utils"

type DSL2ES Peg {
    Queries     *utils.QueryStack
    Values      *utils.ValueStack
    IsFilter    bool
    Verbose     bool
}


# Rules

Result     <- SP? Query SP? Completed
Completed  <- !. { p.Queries.Finalize(p.Values.PopGroup()) }

Query      <- OrExpr
OrExpr     <- AndExpr (SP OR SP OrExpr)?
AndExpr    <- Expr (SP AND SP AndExpr)?
Expr       <- GroupOrNot / Term

Term       <- NotCheck? (KeyValue / SingleValue)
NotCheck   <- NOT SP { p.Values.SetNegation() }

GroupOrNot    <- GroupPrefix GroupSuffix
GroupPrefix   <- NotGroupStart / GroupStart
GroupStart    <- !Not OPENPAREN  { p.Queries.Push(false) }
NotGroupStart <- Not OPENPAREN   { p.Queries.Push(true) }
GroupSuffix   <- SP? Query SP? CLOSEPAREN
Not           <- NOT SP?

KeyValue      <- Key COLON Value
SingleValue   <- Phrase / Number / Word
Key           <- < [a-z]+ > { p.Values.SetField(buffer[begin:end]) }
Value         <- EXISTS / Range / BOOL / Phrase / Date / Number / Word

Range  <- RANGEOP Date / RANGEOP Number
Date   <- < DIGIT DIGIT DIGIT DIGIT SEP DIGIT DIGIT SEP DIGIT DIGIT > { p.Values.RangeOrDate(buffer[begin:end]) }
Phrase <- DQ < [^"]+ > DQ            { p.Values.Phrase(buffer[begin:end]) }


# Token Matchers

Word   <- < [a-zA-Z_] [a-zA-Z0-9_]* > { p.Values.Term(buffer[begin:end]) }
Number <- < [0-9]+ > { p.Values.RangeOrNumber(buffer[begin:end]) }

OPENPAREN  <- '(' { p.Values.StartGroup() }
CLOSEPAREN <- ')' { p.Queries.Compose(p.Values.PopGroup()) }

EXISTS  <- '?' { p.Values.Exists() }
DIGIT   <- [0-9]
SEP     <- '-'
COLON   <- ':'
DQ      <- '"'
NOT     <- 'NOT' / '!'

BOOL    <- 'true' / 'false' { p.Values.Boolean(buffer[begin:end]) }

AND     <- 'AND' { p.Queries.Current().SetOper(utils.And) }
OR      <- 'OR' { p.Queries.Current().SetOper(utils.Or) }

RANGEOP <- GTE / LTE / GT / LT
GTE     <- < '>=' > { p.Values.SetRangeOp(buffer[begin:end]) }
LTE     <- < '<=' > { p.Values.SetRangeOp(buffer[begin:end]) }
GT      <- < '>' >  { p.Values.SetRangeOp(buffer[begin:end]) }
LT      <- < '<' >  { p.Values.SetRangeOp(buffer[begin:end]) }

SP      <- [ \t\r\n]+

