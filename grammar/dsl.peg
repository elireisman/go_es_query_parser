package grammar


import (
  "fmt"

  "github.com/pointlander/peg"
  "gopkg.in/olivere/elastic.v5"
)


type DSL2ES Peg {
    Query     *elastic.BoolQuery
    Filters   *elastic.BoolQuery
    Depth     int
}

func (dsl *DSL2ES) Show(msg, thing interface{}) {
  indent := ""
  for i := 0; i < dsl.Depth; i++ {
    indent += "  "
  }
  fmt.Printf("%s%s => %#v\n", msg, thing)
}

//
// productions:
//
result <- query !. { fmt.Println("RESULT") }

query <- expr (op expr)* { fmt.Println("QUERY") }

op <- and / or { fmt.Println("OP") }

expr <- not? term { fmt.Println("EXPR") }

term <- kv / word / '(' query ')' { fmt.Println("TERM | !TERM") }

kv <- key ':' value { fmt.Println("KEY-VALUE") }

value <- range / number / boolean / phrase / date / word { fmt.Println("VALUE") }

range <- range_op number { fmt.Println("RANGE") }

number <- float / int { fmt.Println("NUMBER") }

date <- year [/.-] month [/.-] day { fmt.Println("DATE") }

//
// terminals:
//
key <- [a-z]+ { fmt.Println("KEY") }

phrase <- '"' [a-zA-Z0-9 \t]+ '"' { fmt.Println("PHRASE") }

word <- [a-zA-Z0-9_-]+ { fmt.Println("WORD") }

year <- [1-2] [0-9] [0-9] [0-9] { fmt.Println("YEAR") }

month <- ('0' [1-9] / '1' [0-2]) { fmt.Println("MONTH") }

day <- ('0' [1-9] / [1-2] [0-9] / '3' [0-1]) { fmt.Println("DAY") }

int <- [0-9]+ { fmt.Println("INTEGER") }

boolean <- 'true' / 'false' { fmt.Println("BOOLEAN") }

float <- [0-9]* '.' [0-9]+ ([eE] int)? { fmt.Println("FLOAT") }

range_op <- '<' / '<=' / '>' / '>=' { fmt.Println("RANGE") }

not <- 'NOT' { fmt.Println("NOT") }

and <- 'AND' { fmt.Println("AND") }

or <- 'OR' { fmt.Println("OR") }

