package grammar

import "github.com/elireisman/go_es_query_parser/utils"

type DSL2ES Peg {
    Queries     *utils.QueryStack
    Values      *utils.ValueStack
    IsFilter    bool
    Verbose     bool
}


# Rules

Result     <- SP? Query SP? Completed
Completed  <- !. { p.Queries.Finalize(p.Values.PopGroup()) }

Query      <- OrExpr
OrExpr     <- AndExpr (SP OR SP OrExpr)?
AndExpr    <- Expr (SP AND SP AndExpr)?
Expr       <- GroupOrNot / Term

Term       <- NotCheck? (KeyValue / SingleValue)
NotCheck   <- NOT SP? { p.Values.SetNegation() }

GroupOrNot    <- GroupPrefix GroupSuffix
GroupPrefix   <- NotGroupStart / GroupStart
GroupStart    <- !Not OPENPAREN  { p.Queries.Push(false) }
NotGroupStart <- Not OPENPAREN   { p.Queries.Push(true) }
GroupSuffix   <- SP? Query SP? CLOSEPAREN
Not           <- NOT SP?

KeyValue      <- Key COLON Value
SingleValue   <- Phrase / DateTime / Number / Word
Key           <- < [A-Za-z_]+ > { p.Values.SetField(buffer[begin:end]) }
Value         <- EXISTS / Window / Range / BOOL / Phrase / DateTime / Number / Word

Range        <- RANGEOP DateTime / RANGEOP Number
DateTime     <- < Date TEE Time ZEE > { p.Values.DateRangeOrMatchTerm(p.IsFilter, buffer[begin:end]) }
Phrase       <- DQ < [^"]+ > DQ       { p.Values.Phrase(buffer[begin:end]) }

Window       <- OPENBRACKET SP? < WindowRange > SP? CLOSEBRACKET { p.Values.Window(buffer[begin:end]) }
WindowRange  <- DateWindow / NumberWindow
DateWindow   <- DateTime TILDA DateTime
NumberWindow <- DASH? [0-9]+ TILDA DASH? [0-9]+


# Token Matchers

Date    <- Digits4 DASH Digits2 DASH Digits2
Time    <- Digits2 COLON Digits2 COLON Digits2
Word    <- < [a-zA-Z_] [a-zA-Z0-9_]* >                         { p.Values.MatchTerm(p.IsFilter, buffer[begin:end]) }
Number  <- < (DIGIT / DOT/ DASH) (DIGIT / DASH / EEE / DOT)* > { p.Values.NumberRangeOrMatchTerm(p.IsFilter, buffer[begin:end]) }
Digits2 <- DIGIT DIGIT
Digits4 <- Digits2 Digits2

OPENPAREN    <- '(' { p.Values.StartGroup() }
CLOSEPAREN   <- ')' { p.Queries.Compose(p.Values.PopGroup()) }
OPENBRACKET  <- '['
CLOSEBRACKET <- ']'

EXISTS  <- '?' { p.Values.Exists() }
DIGIT   <- [0-9]
DASH    <- '-'
COLON   <- ':'
TILDA   <- '~'
DQ      <- '"'
TEE     <- 'T'
ZEE     <- 'Z'
EEE     <- [eE]
DOT     <- '.'

NOT     <- 'NOT' / '!'

BOOL    <- 'true' / 'false' { p.Values.Boolean(buffer[begin:end]) }

AND     <- 'AND' / '&&' { p.Queries.Current().SetOper(utils.And) }
OR      <- 'OR' / '||'  { p.Queries.Current().SetOper(utils.Or) }

RANGEOP <- GTE / LTE / GT / LT
GTE     <- < '>=' > { p.Values.SetRangeOp(utils.GreaterThanEqual) }
LTE     <- < '<=' > { p.Values.SetRangeOp(utils.LessThanEqual) }
GT      <- < '>' >  { p.Values.SetRangeOp(utils.GreaterThan) }
LT      <- < '<' >  { p.Values.SetRangeOp(utils.LessThan) }

SP      <- [ \t\r\n]+

